boxplot.stats(df$Age)
boxplot(df$Parch, outline = TRUE)
boxplot(df$Fare, outline = TRUE)
outlier(df)
df_train <- df[df$Istrain == TRUE,]
df_test <- df[df$Istrain == FALSE,]
equacao <- "Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + EmbarkedS + EmbarkedC + EmbarkedQ"
formulatitanic <- as.formula(equacao)
formulatitanic
library(caret)
#Criando o modelo SVM
library(e1071)
set.seed(10)
modeloSVM <- svm(formula = formulatitanic,
data = df_train,
typeof = 'eps-regression',
kernel = 'linear')
modeloSVM
previsao <- predict(modeloSVM, newdata = df_test[-13], type = "class")
previsao
#Avaliando o modelo
matriz <- table(df_test[,13], modelo)
#Avaliando o modelo
matriz <- table(df_test[,13], modeloSVM)
#Avaliando o modelo
matriz <- table(df_test, modeloSVM)
#Fazendo a previsão
previsao <- predict(modeloSVM, newdata = df_test, type = "class")
previsao
View(df_test[-13])
#Avaliando o modelo
matriz <- table(df_test, modeloSVM)
matriz <- table(df_test[,13], modeloSVM)
#Avaliando o modelo
matriz <- table(df_test[,13], previsao)
modeloSVM <- svm(formula = formulatitanic,
data = df_train,
typeof = 'eps-regression',
kernel = 'linear')
modeloSVM
#Fazendo a previsão
previsao <- predict(modeloSVM, newdata = df_test[-13], type = "class")
previsao
View(df_test[-13])
#Avaliando o modelo
matriz <- table(df_test[,13], previsao)
#Avaliando o modelo
matriz <- table(df_test[,13], previsao)
confusionMatrix(matriz)
df_test$Survived <- previsao
#Avaliando o modelo
matriz <- table(df_test[,13], modeloSVM)
confusionMatrix(matriz)
#Avaliando o modelo
matriz <- table(df_test[,13], previsao)
confusionMatrix(matriz)
modeloSVM <- svm(formula = formulatitanic,
data = df_train,
typeof = 'eps-regression',
kernel = 'linear')
modeloSVM
previsao <- predict(modeloSVM, newdata = df_test[-13], type = "class")
df_test$Survived <- previsao
#Avaliando o modelo
matriz <- table(previsao, modeloSVM)
modeloSVM <- svm(formula = formulatitanic,
data = df_train,
typeof = 'eps-regression',
kernel = 'linear')
modeloSVM
previsao <- predict(modeloSVM, newdata = df_test, type = "class")
df_test$Survived <- previsao
#Avaliando o modelo
matriz <- table(df_test[,13], previsao)
confusionMatrix(matriz)
df_train <- df[df$Istrain == TRUE,]
df_test <- df[df$Istrain == FALSE,]
#Criando a equação e fórmula para rodar no randomForest
equacao <- "Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + EmbarkedS + EmbarkedC + EmbarkedQ"
formulatitanic <- as.formula(equacao)
formulatitanic
library(caret)
#Criando o modelo SVM
library(e1071)
set.seed(10)
modeloSVM <- svm(formula = formulatitanic,
data = df_train,
typeof = 'eps-regression',
kernel = 'linear')
modeloSVM
#Fazendo a previsão
previsao <- predict(modeloSVM, newdata = df_test, type = "class")
previsao
df_test$Survived <- previsao
df_train <- df[df$Istrain == TRUE,]
df_test <- df[df$Istrain == FALSE,]
equacao <- "Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + EmbarkedS + EmbarkedC + EmbarkedQ"
formulatitanic <- as.formula(equacao)
formulatitanic
set.seed(10)
modeloSVM <- svm(formula = formulatitanic,
data = df_train,
typeof = 'eps-regression',
kernel = 'linear')
modeloSVM
#Fazendo a previsão
previsao <- predict(modeloSVM, newdata = df_test, type = "class")
previsao
df_test$Survived <- previsao
set.seed(10)
modeloSVM <- svm(formula = formulatitanic,
data = df_train,
typeof = 'eps-regression',
kernel = 'linear')
modeloSVM
previsao <- predict(modeloSVM, newdata = df_test, type = "class")
previsao
set.seed(10)
modeloSVM <- svm(formula = formulatitanic,
data = df_train,
typeof = 'eps-regression',
kernel = 'linear')
modeloSVM
#Fazendo a previsão
previsao <- predict(modeloSVM, newdata = df_test[-13], type = "class")
previsao
df_test$Survived <- previsao
#Avaliando o modelo
matriz <- table(df_test[,13], previsao)
confusionMatrix(matriz)
#Finalizando o trabalho
PassengerId <- df_test$PassengerId
output <- as.data.frame(PassengerId)
output$Survived <- previsao
write.csv(output, file = "submission.csv", row.names = FALSE)
matriz <- table(output, df)
matriz <- table(df_test[,13], previsao)
confusionMatrix(matriz)
plot(modeloSVM)
set.seed(10)
modeloSVM <- svm(formula = formulatitanic,
data = df_train,
typeof = 'eps-regression',
kernel = 'linear')
modeloSVM
plot(modeloSVM)
plot(modeloSVM)
set.seed(10)
modelo <- randomForest(formula = formulatitanic,
data = df_train,
ntree = 900,
mtry = 3,
nodesize = 0.01 * nrow(df_test)
)
modelo
plot(modelo)
set.seed(10)
modelo <- randomForest(formula = formulatitanic,
data = df_train,
ntree = 450,
mtry = 3,
nodesize = 0.01 * nrow(df_test)
)
modelo
plot(modelo)
set.seed(10)
modelo <- randomForest(formula = formulatitanic,
data = df_train,
ntree = 450,
mtry = 3,
importance = TRUE
nodesize = 0.01 * nrow(df_test)
set.seed(10)
modelo <- randomForest(formula = formulatitanic,
data = df_train,
ntree = 450,
mtry = 3,
importance = TRUE,
nodesize = 0.01 * nrow(df_test)
)
modelo
plot(modelo)
set.seed(10)
modelo <- randomForest(formula = formulatitanic,
data = df_train,
ntree = 190,
mtry = 3,
importance = TRUE,
nodesize = 0.01 * nrow(df_test)
)
modelo
plot(modelo)
set.seed(10)
modelo <- randomForest(formula = formulatitanic,
data = df_train,
ntree = 180,
mtry = 3,
importance = TRUE,
nodesize = 0.01 * nrow(df_test)
)
modelo
plot(modelo)
set.seed(10)
modelo <- randomForest(formula = formulatitanic,
data = df_train,
ntree = 170,
mtry = 3,
importance = TRUE,
nodesize = 0.01 * nrow(df_test)
)
modelo
plot(modelo)
set.seed(10)
modelo <- randomForest(formula = formulatitanic,
data = df_train,
ntree = 175,
mtry = 3,
importance = TRUE,
nodesize = 0.01 * nrow(df_test)
)
modelo
plot(modelo)
set.seed(10)
modelo <- randomForest(formula = formulatitanic,
data = df_train,
ntree = 182,
mtry = 3,
importance = TRUE,
nodesize = 0.01 * nrow(df_test)
)
modelo
plot(modelo)
set.seed(10)
modelo <- randomForest(formula = formulatitanic,
data = df_train,
ntree = 45,
mtry = 3,
importance = TRUE,
nodesize = 0.01 * nrow(df_test)
)
modelo
plot(modelo)
set.seed(10)
modelo <- randomForest(formula = formulatitanic,
data = df_train,
ntree = 50,
mtry = 3,
importance = TRUE,
nodesize = 0.01 * nrow(df_test)
)
modelo
plot(modelo)
set.seed(10)
modelo <- randomForest(formula = formulatitanic,
data = df_train,
ntree = 90,
mtry = 3,
importance = TRUE,
nodesize = 0.01 * nrow(df_test)
)
modelo
plot(modelo)
set.seed(10)
modelo <- randomForest(formula = formulatitanic,
data = df_train,
ntree = 100,
mtry = 3,
importance = TRUE,
nodesize = 0.01 * nrow(df_test)
)
modelo
plot(modelo)
set.seed(10)
modelo <- randomForest(formula = formulatitanic,
data = df_train,
ntree = 190,
mtry = 3,
importance = TRUE,
nodesize = 0.01 * nrow(df_test)
)
modelo
plot(modelo)
set.seed(10)
modelo <- randomForest(formula = formulatitanic,
data = df_train,
ntree = 180,
mtry = 3,
importance = TRUE,
nodesize = 0.01 * nrow(df_test)
)
modelo
plot(modelo)
set.seed(10)
modelo <- randomForest(formula = formulatitanic,
data = df_train,
ntree = 170,
mtry = 3,
importance = TRUE,
nodesize = 0.01 * nrow(df_test)
)
modelo
plot(modelo)
set.seed(10)
modelo <- randomForest(formula = formulatitanic,
data = df_train,
ntree = 175,
mtry = 3,
importance = TRUE,
nodesize = 0.01 * nrow(df_test)
)
modelo
plot(modelo)
set.seed(10)
modelo <- randomForest(formula = formulatitanic,
data = df_train,
ntree = 180,
mtry = 3,
importance = TRUE,
nodesize = 0.01 * nrow(df_test)
)
modelo
plot(modelo)
previsao <- predict(modelo, newdata = df_test[-13])
#Gerando matriz de importância
importancia <- importance(modelo, type = 1)
importancia
#Avaliando o modelo
matriz <- table(df_test[,13], modelo)
#Avaliando o modelo
matriz <- table(df_test[,13], previsao)
confusionMatrix(matriz)
#Finalizando o trabalho
PassengerId <- df_test$PassengerId
output <- as.data.frame(PassengerId)
output$Survived <- previsao
write.csv(output, file = "submission.csv", row.names = FALSE)
set.seed(10)
modeloSVM <- svm(formula = formulatitanic,
data = df_train,
typeof = 'eps-regression',
importance = TRUE
kernel = 'linear')
set.seed(10)
modeloSVM <- svm(formula = formulatitanic,
data = df_train,
typeof = 'eps-regression',
importance = TRUE,
kernel = 'linear')
modeloSVM
plot(modeloSVM)
train <- read.csv("train.csv")
test <- read.csv("test.csv")
#Descobrindo o nome das variáveis
colnames(train)
colnames(test)
#Apresentando um resumo dos dados
summary(train)
summary(test)
#Criando a coluna "faltante" no dataset test
test$Survived<- NA
#Identificando se os dados são de treino ou de teste, para isso criaremos outra coluna, desta forma os dois datasetes terão 13 colunas.
train$Istrain <- TRUE
test$Istrain <- FALSE
#Unindo os dois datasets que conterão as 1309 observações.
df <- rbind(train, test)
#Apresentando o tipo de dados.
str(df)
#Transformando os dados de sexo em binário.
df$Sex[df$Sex=="male"] <- 0
df$Sex[df$Sex=="female"] <- 1
#Transformando os dados da variável Sex em inteiro.
df$Sex <- as.factor(df$Sex)
str(df)
#verificando se existe valores nulos no nosso banco de dados - Como já tínhamos visto ao usar o summary.
sum(is.null(df))
sum(is.na(df))
#Verificando se tem valores vazios no dataset
colSums(df == "")
unique(df$Embarked)
median(df$Embarked)
df$Embarked[df$Embarked==""] <- "S"
#Criando variáveis dummy para Embarked
df$EmbarkedS = as.numeric(df$Embarked == "S")
df$EmbarkedC = as.numeric(df$Embarked == "C")
df$EmbarkedQ = as.numeric(df$Embarked == "Q")
#Deletando a variável Embarked original
df$Embarked <- NULL
colSums(is.na(df)) #Podemos ver 418 NA's em Survived (que nós inserimos), 263 em Age e 1 em Fare.Iremos tratar estes dados faltantes.
#Inserindo a moda nos dados faltantes de Fare, como é apenas um dado faltante, irei utilizar a frequência para completar este dado.
frequency(df$Fare, na.rm = TRUE)
df$Fare = ifelse(is.na(df$Fare), frequency(df$Fare, na.rm = TRUE), df$Fare)
summary(df)
#Transformando as variáveis em fator
str(df)
df$Survived <- as.factor(df$Survived)
df$Pclass <- as.factor(df$Pclass)
df$SibSp <- as.factor(df$SibSp)
df$Parch <- as.factor(df$Parch)
df$EmbarkedS <- as.factor(df$EmbarkedS)
df$EmbarkedC <- as.factor(df$EmbarkedC)
df$EmbarkedQ <- as.factor(df$EmbarkedQ)
str(df)
#Excluindo colunas desnecessárias
df$Name <- NULL
df$Cabin <- NULL
#Alterando a posição da coluna Survived
library(dplyr)
df <- df %>%
relocate(Survived, .after = EmbarkedQ)
df <- kNN(df, variable = "Age", k = 5)
df$Age_imp <- NULL
colSums(is.na(df))
df_train <- df[df$Istrain == TRUE,]
df_test <- df[df$Istrain == FALSE,]
equacao <- "Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + EmbarkedS + EmbarkedC + EmbarkedQ"
formulatitanic <- as.formula(equacao)
formulatitanic
set.seed(10)
modeloSVM <- svm(formula = formulatitanic,
data = df_train,
typeof = 'eps-regression',
importance = TRUE,
kernel = 'linear')
modeloSVM
plot(modeloSVM)
#Criando o modelo SVM
library(e1071)
set.seed(10)
modeloSVM <- svm(formula = formulatitanic,
data = df_train,
typeof = 'eps-regression',
importance = TRUE,
kernel = 'linear')
modeloSVM
plot(modeloSVM)
set.seed(10)
modeloSVM <- svm(formula = formulatitanic,
data = df_train,
typeof = 'eps-regression',
importance = TRUE,
kernel = 'linear')
modeloSVM
#Fazendo a previsão do modelo
previsao <- predict(modeloSVM, newdata = df_test[-13])
#Gerando matriz de importância
importancia <- importance(modelo, type = 1)
#Fazendo a previsão do modelo
previsao <- predict(modeloSVM, newdata = df_test[-13])
#Gerando matriz de importância
importancia <- importance(modeloSVM, type = 1)
set.seed(10)
modeloSVM <- svm(formula = formulatitanic,
data = df_train,
typeof = 'eps-regression',
kernel = 'linear')
modeloSVM
#Fazendo a previsão do modelo
previsao <- predict(modeloSVM, newdata = df_test[-13])
#Avaliando o modelo
matriz <- table(df_test[,13], previsao)
confusionMatrix(matriz)
#Finalizando o trabalho
PassengerId <- df_test$PassengerId
output <- as.data.frame(PassengerId)
output$Survived <- previsao
write.csv(output, file = "submission.csv", row.names = FALSE)
matriz <- table(df_test[,13], previsao)
confusionMatrix(matriz)
set.seed(10)
modeloSVM <- svm(formula = formulatitanic,
data = df_train,
typeof = 'eps-regression',
kernel = 'linear')
modeloSVM
set.seed(10)
modeloSVM <- svm(formula = formulatitanic,
data = df_train,
typeof = 'C-classification',
kernel = 'linear')
modeloSVM
View(df_test)
#Fazendo a previsão do modelo
previsao <- predict(modeloSVM, newdata = df_test[-13])
#Avaliando o modelo
matriz <- table(df_test[,13], previsao)
confusionMatrix(matriz)
#Finalizando o trabalho
PassengerId <- df_test$PassengerId
output <- as.data.frame(PassengerId)
output$Survived <- previsao
write.csv(output, file = "submission.csv", row.names = FALSE)
View(output)
df_test$Survived <- previsao
#Avaliando o modelo
matriz <- table(df_test[,13], previsao)
confusionMatrix(matriz)
set.seed(10)
modeloSVM <- svm(formula = formulatitanic,
data = df_train,
typeof = 'C-classification',
kernel = 'linear')
modeloSVM
#Fazendo a previsão do modelo
previsao <- predict(modeloSVM, newdata = df_test[-13])
#Avaliando o modelo
matriz <- table(df_test[,13], previsao)
confusionMatrix(matriz)
#Finalizando o trabalho
PassengerId <- df_test$PassengerId
output <- as.data.frame(PassengerId)
output$Survived <- previsao
write.csv(output, file = "submission.csv", row.names = FALSE)
